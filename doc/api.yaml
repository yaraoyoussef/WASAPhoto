openapi: 3.0.3
info: 
  title: WASAPhoto
  description: |
    This API document describes the functioning of WASAPhoto website
  version: 1.0.0
paths:
  /session:
    post:
      tags: 
        - Login 
      summary: Logs in the user 
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin 
      requestBody:
        description: User details 
        content:
          application/json: 
            schema:
              type: object 
              description: contains the username
              properties:
                name:
                  type: string 
                  description: the username of the user trying to log-in 
                  example: maria77 
                  pattern: '^([a-z0-9._-])\w+$'
                  minLength: 3 
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful 
          content:
            application/json: 
              schema:
                type: object 
                description: contains the unique id generated for the user 
                properties:
                  identifier: 
                    type: string
                    description: the unique id generated for the user 
                    example: "abcdef012345"
  /users/{username}:
    parameters:
      - $ref: "#/components/parameters/Username"
    get:
      tags:
        - Users 
      security:
        - bearerAuth: []
      operationId: getUserProfile
      summary: shows the profile of a specific user
      description: given a username, it displays its profile
      responses:
        "200":
          description: user found and personal page is displayed
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Profile" }
        "404": { description: user not found }
        "500": 
          description: |
            an error occured, please try again later 
    put:
      tags: 
        - Personal Profile 
      security:
        - bearerAuth: []
      operationId: setMyUserName
      summary: changes the username of the authenticated user 
      description: this operation updates the username of authenticated user
      requestBody:
        description: user's details
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Username" }
      responses:
        "204": { description: Username updated successfully }
        "400": { description: Username already in use }
        "500": 
          description: |
            an error occured, please try again later 
  /users/{username}/home/:
    parameters:
      - $ref: "#/components/parameters/Username"
    get:
      tags: 
        - Personal Profile 
      security:
        - bearerAuth: []
      operationId: getMyStream
      summary: returns stream of current user
      description: shows the stream of the current user
      responses:
        "200": 
          description: stream returned successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Stream" }
        "400": 
          description: |
            error, please try again later 
        "500": 
          description: | 
            could not load feed, please try again later 
  /users/{username}/follow/{otherUsername}:
    parameters:
      - $ref: "#/components/parameters/Username"
      - $ref: "#/components/parameters/OtherUsername"
    put:
      tags:
        - Follow
      security:
        - bearerAuth: []
      operationId: followUser
      summary: follows another user
      description: allows the authorised user to follow another user
      requestBody:
        content:
          application/json: 
            schema:  { $ref: "#/components/schemas/Username" } 
      responses:
        "201":
          description: user followed successfully
          content:
            application/json:
              schema:  { $ref: "#/components/schemas/Username" }
        "404": { description: user not found }
        "500": { description: failed to follow this user }
    delete:
      tags: 
        - Follow
      security:
        - bearerAuth: []
      operationId: unfollowUser
      summary: unfollows another user
      description: allows user to unfollow another user
      responses:
        "204": { description: user unfollowed successfully }
        "404": 
          description: |
            error, user not found 
        "500": { description: failed to unfollow this user }
  /users/{username}/banned/{otherUsername}:
    parameters:
      - $ref: "#/components/parameters/Username"
      - $ref: "#/components/parameters/OtherUsername"
    put:
      tags:
        - Ban 
      security:
        - bearerAuth: []
      operationId: banUser
      summary: bans user 
      description: allows user to ban others
      responses:
        "201": { description: user banned successfully }
        "404": { description: user not found }
        "500": { description: failed to ban user }
    delete:
      tags: 
        - Ban
      security:
        - bearerAuth: []
      operationId: unbanUser
      summary: unbans user
      description: allows user to remove a ban put previously
      responses:
        "204": { description: user unbanned successfully }
        "404": { description: error; user not found }
        "500": { description: failed to unban user }
  /users/{username}/photos/:
    parameters:
      - $ref: "#/components/parameters/Username"
    post:
      tags: 
        - Photos
      security:
        - bearerAuth: []
      operationId: uploadPhoto
      summary: uploads a new photo in the user profile
      description: |
        method that enables user to add a new photo to his profile
        generating a photo id for the photo
      requestBody:
        content:
          image/png:
            schema:
              $ref: "#/components/schemas/RawPhoto"
        required: true
      responses:
        "201":
          description: photo uploaded successfully
          content:
            image/png: 
              schema: { $ref: "#/components/schemas/Photo" }
        "400": {description: failed to upload photo }
        "500": 
          description: |
            an error occured please try again later 
  /users/{username}/photos/{photoId}:
    parameters:
      - $ref: "#/components/parameters/Username"
      - $ref: "#/components/parameters/PhotoId"
    delete:
      tags: 
        - Photos
      security:
        - bearerAuth: []
      operationId: deletePhoto
      summary: lets user delete an uploaded photo
      description: enables the user to delete an uploaded photo 
      responses:
        "204": { description: photo deleted successfully }
        "404": { description: error; photo not found }
        "500":  
          description: |
            an error occured, please try again later 
  /users/{username}/photos/{photoId}/likes/{otherUsername}:
    parameters:
      - $ref: "#/components/parameters/Username"
      - $ref: "#/components/parameters/PhotoId"
      - $ref: "#/components/parameters/OtherUsername"
    put:
      tags: 
        - Likes
      security:
        - bearerAuth: []
      operationId: likePhoto
      summary: to like a photo
      description: lets the user like a photo 
      requestBody:
        content:
          image/png:
            schema: { $ref: "#/components/schemas/Photo" }
      responses:
        "201": 
          description: photo liked successfully
          content:
            image/png:
              schema:  { $ref: "#/components/schemas/Photo" }
        "404": { description: error; photo not found }
        "500":  
          description: |
            an errror occured, please try again later 
    delete:
      tags: 
        - Likes
      security:
        - bearerAuth: []
      operationId: unlikePhoto
      summary: unlikes a photo
      description: allows the current user to remove a like from photo
      responses:
        "204": { description: like removed successfully }
        "404": { description: error; photo not found }
        "500": 
          description: |
            an error occured, please retry later 
  /users/{username}/photos/{photoId}/comments:
    parameters:
      - $ref: "#/components/parameters/Username"
      - $ref: "#/components/parameters/PhotoId"
    post:
      tags: 
        - Comments
      security:
        - bearerAuth: []
      operationId: commentPhoto
      summary: to comment a photo
      description: |
        allows user to add a comment to a photo generating a 
        new comment id 
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Comment" }
      responses:
        "201":
          description: comment added successfully
          content:
            image/png:
              schema:  { $ref: "#/components/schemas/Photo" }
        "404": { description: error; photo not found }
        "500":  
          description: |
            an error occured, please retry later 
  /users/{username}/photos/{photoId}/comments/{commentId}:
    parameters:
      - $ref: "#/components/parameters/Username"
      - $ref: "#/components/parameters/PhotoId"
      - $ref: "#/components/parameters/CommentId"
    delete:
      tags: 
        - Comments
      security:
        - bearerAuth: []
      operationId: uncommentPhoto
      summary: removes a comment
      description: allows user to delete his comment from a photo
      responses:
        "204": { description: comment removed successfully }
        "404": { description: error; photo not found }
        "500": 
          description: | 
            an error occured, please retry later 
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    Profile:
      title: Profile
      description: the object represents the profile of a single user
      type: object
      properties:
        username: { $ref: "#/components/schemas/Username" }
        photos:
          type: array
          description: represents the pictures uploaded by a given user 
          items: { $ref: "#/components/schemas/Photo" }
          minItems: 0
          maxItems: 5000000
        followers:
          type: array
          description: represents the followers of a given user 
          items: { $ref: "#/components/schemas/Username"}
          minItems: 0
          maxItems: 100000000000
        following:
          type: array
          description: represents the followings of a given user 
          items: { $ref: "#/components/schemas/Username"}
          minItems: 0
          maxItems: 100000000000
        posts:
          type: integer
          description: number of photos a user uploaded 
          example: 1
    Username: 
      title: Username
      description: username of user 
      type: object
      properties:
        username:
          description: string between 5 and 15 characters
          type: string 
          pattern: '^([a-z0-9._-])\w+$'
          minLength: 5
          maxLength: 15
          example: maria77
    RawPhoto:
      description: contains the raw image the user wants to upload
      type: object
      properties:
        data: 
          description: data of the image
          type: string
          format: binary
          pattern: "^[0-1]*$"
          minLength: 1
          maxLength: 2147483647
          example: "0110010101"
    Photo:
      title: Photo
      description: | 
        this object represents a picture with all its 
        related information
      type: object
      properties:
        photoId:
          description: id of a photo
          type: number
          example: 10097
        owner:
          description: username of user that uploaded the photo
          $ref: "#/components/schemas/Username"
        likes:
          description: represents the lits of likes on a given photo
          type: array
          items:
            $ref: "#/components/schemas/Username"
          minItems: 0
          maxItems: 100000000000
          example: [maria77, bob77]
        comments: 
          description: represents the list of comments on a given photo
          type: array 
          items: 
            $ref: "#/components/schemas/Comment"
          minItems: 0
          maxItems: 100000000000
        dateAndTime:
          description: represents the date and time in which the picture was uploaded
          type: string
          format: date-time 
          minLength: 20
          maxLength: 20
          example: 2017-07-21T17:32:28Z 
    Comment: 
      title: Comment
      description: this object represents a single comment
      type: object
      properties:
        commentId:
          type: number
          description: represents the id of a comment 
          example: 01
        username: { $ref: "#/components/schemas/Username" }
        comment: 
          type: string 
          description: the comment itself 
          minLength: 1
          maxLength: 500 
          example: beautiful picture man! 
          pattern: "^(.*?)$"
    Stream:
      title: stream 
      description: user's feed
      type: object
      properties:
        data: 
          type: array
          description: represents the photos shown in the current user's feed
          items: { $ref: "#/components/schemas/Photo"}
          minItems: 0
          maxItems: 100000000000
  parameters:
    Username:
      schema:
        type: string
        pattern: '^([a-z0-9._-])\w+$'
        minLength: 5
        maxLength: 15
        example: maria77
      name: username
      in: path
      required: true
      description: username of the authorised user
    OtherUsername:
      schema:
        type: string
        pattern: '^([a-z0-9._-])\w+$'
        minLength: 5
        maxLength: 15
        example: bob77
      name: otherUsername
      in: path
      required: true
      description: username of a user
    PhotoId:
      schema:
        type: number
        example: 10097
      name: photoId
      in: path
      required: true
      description: id of a photo 
    CommentId:  
      schema:
        type: number
        example: 01
      name: commentId
      in: path
      required: true
      description: id of a comment
tags:
  - name: Login 
    description: relating to login action to the platform
  - name: Users 
    description: for operations related to the users 
  - name: Personal Profile 
    description: for operations related to the current user 
  - name: Follow  
    description: for operations related to following or unfollowing another user 
  - name: Ban 
    description: for operations related to banning or unbanning another user  
  - name: Photos 
    description: for operations related to photos 
  - name: Likes 
    description: for operations related to liking or unliking a photo
  - name: Comments 
    description: for operations related to commenting or uncommenting a photo